import React, { useState, useEffect } from "react";
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Tabs,
  Tab,
  Chip,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Slider,
  Alert,
  Snackbar,
  Badge,
} from "@mui/material";
import {
  Warning as WarningIcon,
  Error as ErrorIcon,
  Info as InfoIcon,
  CheckCircle as SuccessIcon,
  Settings as SettingsIcon,
  Refresh as RefreshIcon,
  FilterList as FilterIcon,
  Visibility as ViewIcon,
  Delete as DeleteIcon,
  Add as AddIcon,
  Notifications as NotificationIcon,
} from "@mui/icons-material";
import { alertAPI, resultAPI } from "../utils/api";

const AlertCenter = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [alerts, setAlerts] = useState([]);
  const [filteredAlerts, setFilteredAlerts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [filterStatus, setFilterStatus] = useState("all");
  const [filterSeverity, setFilterSeverity] = useState("all");
  const [selectedAlert, setSelectedAlert] = useState(null);
  const [viewDialogOpen, setViewDialogOpen] = useState(false);
  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");

  const [alertSettings, setAlertSettings] = useState({
    crowdThreshold: 35,
    enableEmailNotifications: true,
    enablePushNotifications: true,
    enableSoundAlerts: true,
    autoResolveTime: 5, // minutes
    severityLevels: {
      low: { threshold: 25, color: "#4caf50" },
      medium: { threshold: 35, color: "#ff9800" },
      high: { threshold: 50, color: "#f44336" },
    },
  });

  const tabLabels = [
    "Active Alerts",
    "Alert History",
    "Alert Rules",
    "Settings",
  ];

  useEffect(() => {
    loadAlerts();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [alerts, filterStatus, filterSeverity]);

  const loadAlerts = async () => {
    setLoading(true);
    try {
      // Get existing alerts from API
      const existingAlerts = await alertAPI.getAll();

      // Also generate alerts from recent detection data
      const detections = await resultAPI.getAll();
      const recentAlerts = generateAlertsFromDetections(detections);

      // Combine and deduplicate alerts
      const allAlerts = [...existingAlerts, ...recentAlerts];
      const uniqueAlerts = deduplicateAlerts(allAlerts);

      setAlerts(
        uniqueAlerts.sort(
          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
        )
      );
    } catch (error) {
      console.error("Failed to load alerts:", error);
      setSnackbarMessage("Failed to load alerts");
      setSnackbarOpen(true);
    } finally {
      setLoading(false);
    }
  };

  const generateAlertsFromDetections = (detections) => {
    const alerts = [];
    const flatDetections = detections
      .flat()
      .filter((d) => d && d.alert && d.timestamp);

    flatDetections.forEach((detection, index) => {
      const severity = getSeverityFromCount(detection.count || 0);
      alerts.push({
        id: `detection-${detection.frame || index}`,
        type: "crowd_density",
        message: `High crowd density detected: ${detection.count} people`,
        severity,
        status: "active",
        timestamp: detection.timestamp,
        crowdCount: detection.count || 0,
        frame: detection.frame || index,
        source: "detection_system",
        autoGenerated: true,
      });
    });

    return alerts;
  };

  const getSeverityFromCount = (count) => {
    if (count >= alertSettings.severityLevels.high.threshold) return "high";
    if (count >= alertSettings.severityLevels.medium.threshold) return "medium";
    return "low";
  };

  const deduplicateAlerts = (alerts) => {
    const seen = new Set();
    return alerts.filter((alert) => {
      const key = `${alert.type}-${alert.timestamp}-${alert.crowdCount}`;
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
  };

  const applyFilters = () => {
    let filtered = [...alerts];

    if (filterStatus !== "all") {
      filtered = filtered.filter((alert) => alert.status === filterStatus);
    }

    if (filterSeverity !== "all") {
      filtered = filtered.filter((alert) => alert.severity === filterSeverity);
    }

    setFilteredAlerts(filtered);
  };

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  const handleViewAlert = (alert) => {
    setSelectedAlert(alert);
    setViewDialogOpen(true);
  };

  const handleResolveAlert = async (alertId) => {
    try {
      // Update alert status locally
      setAlerts(
        alerts.map((alert) =>
          alert.id === alertId
            ? {
                ...alert,
                status: "resolved",
                resolvedAt: new Date().toISOString(),
              }
            : alert
        )
      );

      // If it's a real alert (not auto-generated), update in backend
      const alert = alerts.find((a) => a.id === alertId);
      if (alert && !alert.autoGenerated) {
        await alertAPI.update(alertId, { status: "resolved" });
      }

      setSnackbarMessage("Alert resolved successfully");
      setSnackbarOpen(true);
    } catch (error) {
      console.error("Failed to resolve alert:", error);
      setSnackbarMessage("Failed to resolve alert");
      setSnackbarOpen(true);
    }
  };

  const handleDeleteAlert = async (alertId) => {
    try {
      setAlerts(alerts.filter((alert) => alert.id !== alertId));

      // If it's a real alert (not auto-generated), delete from backend
      const alert = alerts.find((a) => a.id === alertId);
      if (alert && !alert.autoGenerated) {
        await alertAPI.delete(alertId);
      }

      setSnackbarMessage("Alert deleted successfully");
      setSnackbarOpen(true);
    } catch (error) {
      console.error("Failed to delete alert:", error);
      setSnackbarMessage("Failed to delete alert");
      setSnackbarOpen(true);
    }
  };

  const handleSaveSettings = () => {
    // In a real application, you would save these to the backend
    setSnackbarMessage("Alert settings saved successfully");
    setSnackbarOpen(true);
    setSettingsDialogOpen(false);
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case "high":
        return <ErrorIcon color="error" />;
      case "medium":
        return <WarningIcon color="warning" />;
      case "low":
        return <InfoIcon color="info" />;
      default:
        return <InfoIcon />;
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "high":
        return "error";
      case "medium":
        return "warning";
      case "low":
        return "info";
      default:
        return "default";
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "active":
        return "error";
      case "resolved":
        return "success";
      case "acknowledged":
        return "warning";
      default:
        return "default";
    }
  };

  const getAlertStats = () => {
    const active = alerts.filter((a) => a.status === "active").length;
    const resolved = alerts.filter((a) => a.status === "resolved").length;
    const high = alerts.filter((a) => a.severity === "high").length;
    const total = alerts.length;

    return { active, resolved, high, total };
  };

  const renderActiveAlertsTab = () => {
    const activeAlerts = filteredAlerts.filter(
      (alert) => alert.status === "active"
    );
    const stats = getAlertStats();

    return (
      <Grid container spacing={3}>
        {/* Alert Statistics */}
        <Grid item xs={12}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    <Badge badgeContent={stats.active} color="error">
                      <NotificationIcon color="error" />
                    </Badge>
                    <Box sx={{ ml: 2 }}>
                      <Typography variant="h4">{stats.active}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        Active Alerts
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    <SuccessIcon color="success" />
                    <Box sx={{ ml: 2 }}>
                      <Typography variant="h4">{stats.resolved}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        Resolved Today
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    <ErrorIcon color="error" />
                    <Box sx={{ ml: 2 }}>
                      <Typography variant="h4">{stats.high}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        High Severity
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    <InfoIcon color="primary" />
                    <Box sx={{ ml: 2 }}>
                      <Typography variant="h4">{stats.total}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        Total Alerts
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Grid>

        {/* Active Alerts List */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  mb: 2,
                }}
              >
                <Typography variant="h6">Active Alerts</Typography>
                <Box sx={{ display: "flex", gap: 2 }}>
                  <FormControl size="small" sx={{ minWidth: 120 }}>
                    <InputLabel>Severity</InputLabel>
                    <Select
                      value={filterSeverity}
                      label="Severity"
                      onChange={(e) => setFilterSeverity(e.target.value)}
                    >
                      <MenuItem value="all">All</MenuItem>
                      <MenuItem value="high">High</MenuItem>
                      <MenuItem value="medium">Medium</MenuItem>
                      <MenuItem value="low">Low</MenuItem>
                    </Select>
                  </FormControl>
                  <Tooltip title="Refresh">
                    <IconButton onClick={loadAlerts} disabled={loading}>
                      <RefreshIcon />
                    </IconButton>
                  </Tooltip>
                </Box>
              </Box>

              {activeAlerts.length === 0 ? (
                <Box sx={{ textAlign: "center", py: 4 }}>
                  <SuccessIcon
                    sx={{ fontSize: 48, color: "success.main", mb: 2 }}
                  />
                  <Typography variant="h6" gutterBottom>
                    No Active Alerts
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    All systems are operating normally
                  </Typography>
                </Box>
              ) : (
                activeAlerts.slice(0, 10).map((alert) => (
                  <Paper
                    key={alert.id}
                    sx={{
                      p: 2,
                      mb: 2,
                      border: `2px solid ${
                        alertSettings.severityLevels[alert.severity]?.color ||
                        "#ccc"
                      }`,
                      borderRadius: 2,
                    }}
                  >
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "space-between",
                      }}
                    >
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          flexGrow: 1,
                        }}
                      >
                        {getSeverityIcon(alert.severity)}
                        <Box sx={{ ml: 2 }}>
                          <Typography
                            variant="subtitle1"
                            sx={{ fontWeight: 600 }}
                          >
                            {alert.message}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {new Date(alert.timestamp).toLocaleString()} •
                            Frame: {alert.frame}
                          </Typography>
                        </Box>
                      </Box>
                      <Box
                        sx={{ display: "flex", alignItems: "center", gap: 1 }}
                      >
                        <Chip
                          label={alert.severity.toUpperCase()}
                          color={getSeverityColor(alert.severity)}
                          size="small"
                        />
                        <Chip
                          label={alert.status.toUpperCase()}
                          color={getStatusColor(alert.status)}
                          size="small"
                        />
                        <IconButton
                          size="small"
                          onClick={() => handleViewAlert(alert)}
                        >
                          <ViewIcon />
                        </IconButton>
                        <Button
                          size="small"
                          variant="contained"
                          color="success"
                          onClick={() => handleResolveAlert(alert.id)}
                        >
                          Resolve
                        </Button>
                      </Box>
                    </Box>
                  </Paper>
                ))
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    );
  };

  const renderAlertHistoryTab = () => (
    <Card>
      <CardContent>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography variant="h6">Alert History</Typography>
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>Status</InputLabel>
            <Select
              value={filterStatus}
              label="Status"
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <MenuItem value="all">All</MenuItem>
              <MenuItem value="active">Active</MenuItem>
              <MenuItem value="resolved">Resolved</MenuItem>
              <MenuItem value="acknowledged">Acknowledged</MenuItem>
            </Select>
          </FormControl>
        </Box>

        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Severity</TableCell>
                <TableCell>Message</TableCell>
                <TableCell>Timestamp</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Crowd Count</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredAlerts
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((alert) => (
                  <TableRow key={alert.id}>
                    <TableCell>
                      <Box sx={{ display: "flex", alignItems: "center" }}>
                        {getSeverityIcon(alert.severity)}
                        <Chip
                          label={alert.severity}
                          color={getSeverityColor(alert.severity)}
                          size="small"
                          sx={{ ml: 1 }}
                        />
                      </Box>
                    </TableCell>
                    <TableCell>{alert.message}</TableCell>
                    <TableCell>
                      {new Date(alert.timestamp).toLocaleString()}
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={alert.status}
                        color={getStatusColor(alert.status)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>{alert.crowdCount || "N/A"}</TableCell>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={() => handleViewAlert(alert)}
                      >
                        <ViewIcon />
                      </IconButton>
                      <IconButton
                        size="small"
                        onClick={() => handleDeleteAlert(alert.id)}
                        color="error"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
            </TableBody>
          </Table>
        </TableContainer>

        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={filteredAlerts.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(event, newPage) => setPage(newPage)}
          onRowsPerPageChange={(event) => {
            setRowsPerPage(parseInt(event.target.value, 10));
            setPage(0);
          }}
        />
      </CardContent>
    </Card>
  );

  const renderAlertRulesTab = () => (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          Alert Rules Configuration
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
          Configure when alerts should be triggered based on crowd density
          levels
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2, bgcolor: "success.light" }}>
              <Typography variant="h6" color="success.dark" gutterBottom>
                Low Alert
              </Typography>
              <Typography variant="h4" color="success.dark">
                {alertSettings.severityLevels.low.threshold}+
              </Typography>
              <Typography variant="body2" color="success.dark">
                people detected
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2, bgcolor: "warning.light" }}>
              <Typography variant="h6" color="warning.dark" gutterBottom>
                Medium Alert
              </Typography>
              <Typography variant="h4" color="warning.dark">
                {alertSettings.severityLevels.medium.threshold}+
              </Typography>
              <Typography variant="body2" color="warning.dark">
                people detected
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2, bgcolor: "error.light" }}>
              <Typography variant="h6" color="error.dark" gutterBottom>
                High Alert
              </Typography>
              <Typography variant="h4" color="error.dark">
                {alertSettings.severityLevels.high.threshold}+
              </Typography>
              <Typography variant="body2" color="error.dark">
                people detected
              </Typography>
            </Paper>
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", justifyContent: "flex-end" }}>
          <Button
            variant="contained"
            startIcon={<SettingsIcon />}
            onClick={() => setSettingsDialogOpen(true)}
          >
            Configure Thresholds
          </Button>
        </Box>
      </CardContent>
    </Card>
  );

  const renderSettingsTab = () => (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          Notification Settings
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={alertSettings.enableEmailNotifications}
                  onChange={(e) =>
                    setAlertSettings({
                      ...alertSettings,
                      enableEmailNotifications: e.target.checked,
                    })
                  }
                />
              }
              label="Email Notifications"
            />
            <Typography variant="body2" color="text.secondary" sx={{ ml: 4 }}>
              Send alerts to registered email addresses
            </Typography>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={alertSettings.enablePushNotifications}
                  onChange={(e) =>
                    setAlertSettings({
                      ...alertSettings,
                      enablePushNotifications: e.target.checked,
                    })
                  }
                />
              }
              label="Push Notifications"
            />
            <Typography variant="body2" color="text.secondary" sx={{ ml: 4 }}>
              Show browser push notifications
            </Typography>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={alertSettings.enableSoundAlerts}
                  onChange={(e) =>
                    setAlertSettings({
                      ...alertSettings,
                      enableSoundAlerts: e.target.checked,
                    })
                  }
                />
              }
              label="Sound Alerts"
            />
            <Typography variant="body2" color="text.secondary" sx={{ ml: 4 }}>
              Play sound when alerts are triggered
            </Typography>
          </Grid>

          <Grid item xs={12} md={6}>
            <Typography variant="body1" gutterBottom>
              Auto-resolve Time: {alertSettings.autoResolveTime} minutes
            </Typography>
            <Slider
              value={alertSettings.autoResolveTime}
              onChange={(e, value) =>
                setAlertSettings({
                  ...alertSettings,
                  autoResolveTime: value,
                })
              }
              min={1}
              max={60}
              marks={[
                { value: 1, label: "1m" },
                { value: 30, label: "30m" },
                { value: 60, label: "1h" },
              ]}
              valueLabelDisplay="auto"
            />
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", justifyContent: "flex-end" }}>
          <Button variant="contained" onClick={handleSaveSettings}>
            Save Settings
          </Button>
        </Box>
      </CardContent>
    </Card>
  );

  return (
    <Box sx={{ width: "100%" }}>
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 3,
        }}
      >
        <Typography variant="h4" sx={{ fontWeight: 700 }}>
          Alert Center
        </Typography>
        <Badge badgeContent={getAlertStats().active} color="error">
          <NotificationIcon />
        </Badge>
      </Box>

      {/* Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs value={activeTab} onChange={handleTabChange} variant="fullWidth">
          {tabLabels.map((label, index) => (
            <Tab key={index} label={label} />
          ))}
        </Tabs>
      </Paper>

      {/* Tab Content */}
      <Box>
        {activeTab === 0 && renderActiveAlertsTab()}
        {activeTab === 1 && renderAlertHistoryTab()}
        {activeTab === 2 && renderAlertRulesTab()}
        {activeTab === 3 && renderSettingsTab()}
      </Box>

      {/* View Alert Dialog */}
      <Dialog
        open={viewDialogOpen}
        onClose={() => setViewDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Alert Details</DialogTitle>
        <DialogContent>
          {selectedAlert && (
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Alert ID"
                  value={selectedAlert.id}
                  fullWidth
                  InputProps={{ readOnly: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Severity"
                  value={selectedAlert.severity}
                  fullWidth
                  InputProps={{ readOnly: true }}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  label="Message"
                  value={selectedAlert.message}
                  fullWidth
                  InputProps={{ readOnly: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Timestamp"
                  value={new Date(selectedAlert.timestamp).toLocaleString()}
                  fullWidth
                  InputProps={{ readOnly: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  label="Crowd Count"
                  value={selectedAlert.crowdCount || "N/A"}
                  fullWidth
                  InputProps={{ readOnly: true }}
                />
              </Grid>
            </Grid>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setViewDialogOpen(false)}>Close</Button>
          {selectedAlert && selectedAlert.status === "active" && (
            <Button
              variant="contained"
              color="success"
              onClick={() => {
                handleResolveAlert(selectedAlert.id);
                setViewDialogOpen(false);
              }}
            >
              Resolve Alert
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Settings Dialog */}
      <Dialog
        open={settingsDialogOpen}
        onClose={() => setSettingsDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Alert Threshold Settings</DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <Typography gutterBottom>Low Alert Threshold</Typography>
            <Slider
              value={alertSettings.severityLevels.low.threshold}
              onChange={(e, value) =>
                setAlertSettings({
                  ...alertSettings,
                  severityLevels: {
                    ...alertSettings.severityLevels,
                    low: {
                      ...alertSettings.severityLevels.low,
                      threshold: value,
                    },
                  },
                })
              }
              min={10}
              max={50}
              valueLabelDisplay="auto"
              marks={[
                { value: 10, label: "10" },
                { value: 25, label: "25" },
                { value: 50, label: "50" },
              ]}
            />
          </Box>

          <Box sx={{ mt: 3 }}>
            <Typography gutterBottom>Medium Alert Threshold</Typography>
            <Slider
              value={alertSettings.severityLevels.medium.threshold}
              onChange={(e, value) =>
                setAlertSettings({
                  ...alertSettings,
                  severityLevels: {
                    ...alertSettings.severityLevels,
                    medium: {
                      ...alertSettings.severityLevels.medium,
                      threshold: value,
                    },
                  },
                })
              }
              min={20}
              max={60}
              valueLabelDisplay="auto"
              marks={[
                { value: 20, label: "20" },
                { value: 35, label: "35" },
                { value: 60, label: "60" },
              ]}
            />
          </Box>

          <Box sx={{ mt: 3 }}>
            <Typography gutterBottom>High Alert Threshold</Typography>
            <Slider
              value={alertSettings.severityLevels.high.threshold}
              onChange={(e, value) =>
                setAlertSettings({
                  ...alertSettings,
                  severityLevels: {
                    ...alertSettings.severityLevels,
                    high: {
                      ...alertSettings.severityLevels.high,
                      threshold: value,
                    },
                  },
                })
              }
              min={30}
              max={100}
              valueLabelDisplay="auto"
              marks={[
                { value: 30, label: "30" },
                { value: 50, label: "50" },
                { value: 100, label: "100" },
              ]}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSettingsDialogOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={handleSaveSettings}>
            Save Changes
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
      >
        <Alert
          onClose={() => setSnackbarOpen(false)}
          severity="success"
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default AlertCenter;
