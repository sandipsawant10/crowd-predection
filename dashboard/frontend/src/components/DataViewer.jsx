/**
 * DataViewer Component
 *
 * Displays detection and forecast data from files generated by external ML processes.
 *
 * NOTE: This component only visualizes data from result files. It does not
 * perform ML processing or analysis. All data comes from pre-processed files
 * in the results folder.
 *
 * Supports both chart and table views for data visualization.
 */

import React, { useState, useEffect } from "react";
import {
  Box,
  Card,
  CardContent,
  Typography,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Alert,
  CircularProgress,
  ToggleButton,
  ToggleButtonGroup,
  Divider,
} from "@mui/material";
import {
  ShowChart as ChartIcon,
  TableChart as TableIcon,
  TrendingUp,
  TrendingDown,
  TrendingFlat,
} from "@mui/icons-material";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  AreaChart,
  Area,
  BarChart,
  Bar,
} from "recharts";
import { format } from "date-fns";
import { resultAPI } from "../utils/api";

const DataViewer = ({ selectedFile }) => {
  const [fileData, setFileData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState("chart");
  const [activeTab, setActiveTab] = useState(0);

  // Load file contents
  const loadFileData = async (filename) => {
    try {
      setLoading(true);
      setError(null);

      const response = await resultAPI.getFileContents(filename);

      if (response.success) {
        setFileData(response);
      } else {
        setError("Failed to load file contents");
      }
    } catch (err) {
      console.error("Error loading file data:", err);
      setError("Failed to load file contents");
    } finally {
      setLoading(false);
    }
  };

  // Process detection data for charts
  const processDetectionData = (data) => {
    if (!Array.isArray(data)) return [];

    return data.map((item, index) => ({
      frame: item.frame || index + 1,
      count: item.count,
      averageCount: item.average_count,
      alert: item.alert,
      timestamp: new Date(item.timestamp).getTime(),
      timeFormatted: format(new Date(item.timestamp), "HH:mm:ss"),
    }));
  };

  // Process forecast data for charts
  const processForecastData = (data) => {
    if (!data.lstm_predictions || !data.linear_predictions) return [];

    return data.lstm_predictions.map((lstm, index) => ({
      step: index + 1,
      lstm: lstm,
      linear: data.linear_predictions[index],
      difference: Math.abs(lstm - data.linear_predictions[index]),
    }));
  };

  // Handle view mode change
  const handleViewModeChange = (event, newMode) => {
    if (newMode !== null) {
      setViewMode(newMode);
    }
  };

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  // Get trend icon
  const getTrendIcon = (trend) => {
    switch (trend) {
      case "increasing":
        return <TrendingUp color="error" />;
      case "decreasing":
        return <TrendingDown color="success" />;
      default:
        return <TrendingFlat color="info" />;
    }
  };

  // Load data when selected file changes
  useEffect(() => {
    if (selectedFile) {
      loadFileData(selectedFile.filename);
      setActiveTab(0); // Reset to first tab
    }
  }, [selectedFile]);

  if (!selectedFile) {
    return (
      <Card>
        <CardContent>
          <Box textAlign="center" py={4}>
            <Typography variant="body1" color="text.secondary">
              Select a file to view its contents
            </Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  if (loading) {
    return (
      <Card>
        <CardContent>
          <Box
            display="flex"
            alignItems="center"
            justifyContent="center"
            py={4}
          >
            <CircularProgress />
            <Typography variant="body2" sx={{ ml: 2 }}>
              Loading file contents...
            </Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent>
          <Alert severity="error">{error}</Alert>
        </CardContent>
      </Card>
    );
  }

  const isDetection = selectedFile.type === "detection";
  const chartData = isDetection
    ? processDetectionData(fileData?.data)
    : processForecastData(fileData?.data);

  return (
    <Card>
      <CardContent>
        {/* Header */}
        <Box
          display="flex"
          justifyContent="space-between"
          alignItems="center"
          mb={2}
        >
          <Box>
            <Typography variant="h6" component="h2">
              {selectedFile.filename}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {selectedFile.type} • {selectedFile.sizeFormatted} •{" "}
              {format(new Date(selectedFile.modified), "MMM dd, yyyy HH:mm:ss")}
            </Typography>
          </Box>

          <ToggleButtonGroup
            value={viewMode}
            exclusive
            onChange={handleViewModeChange}
            size="small"
          >
            <ToggleButton value="chart">
              <ChartIcon />
            </ToggleButton>
            <ToggleButton value="table">
              <TableIcon />
            </ToggleButton>
          </ToggleButtonGroup>
        </Box>

        <Divider sx={{ mb: 2 }} />

        {/* Detection Data Display */}
        {isDetection && (
          <>
            {viewMode === "chart" ? (
              <Box>
                <Tabs
                  value={activeTab}
                  onChange={handleTabChange}
                  sx={{ mb: 2 }}
                >
                  <Tab label="Count Over Time" />
                  <Tab label="Alert Status" />
                </Tabs>

                <Box height={400}>
                  <ResponsiveContainer width="100%" height="100%">
                    {activeTab === 0 ? (
                      <LineChart data={chartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis
                          dataKey="frame"
                          label={{
                            value: "Frame",
                            position: "insideBottom",
                            offset: -10,
                          }}
                        />
                        <YAxis
                          label={{
                            value: "Count",
                            angle: -90,
                            position: "insideLeft",
                          }}
                        />
                        <Tooltip
                          labelFormatter={(value) => `Frame ${value}`}
                          formatter={(value, name) => [
                            value,
                            name === "count" ? "Actual Count" : "Average Count",
                          ]}
                        />
                        <Legend />
                        <Line
                          type="monotone"
                          dataKey="count"
                          stroke="#1976d2"
                          strokeWidth={2}
                          name="Actual Count"
                        />
                        <Line
                          type="monotone"
                          dataKey="averageCount"
                          stroke="#ff9800"
                          strokeWidth={2}
                          name="Average Count"
                        />
                      </LineChart>
                    ) : (
                      <BarChart data={chartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="frame" />
                        <YAxis />
                        <Tooltip
                          formatter={(value, name, props) => [
                            props.payload.alert ? "Alert" : "Normal",
                            "Status",
                          ]}
                        />
                        <Bar
                          dataKey="count"
                          fill={(entry) =>
                            entry.alert ? "#f44336" : "#4caf50"
                          }
                          name="Count"
                        />
                      </BarChart>
                    )}
                  </ResponsiveContainer>
                </Box>
              </Box>
            ) : (
              <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                <Table stickyHeader>
                  <TableHead>
                    <TableRow>
                      <TableCell>Frame</TableCell>
                      <TableCell>Timestamp</TableCell>
                      <TableCell align="right">Count</TableCell>
                      <TableCell align="right">Average</TableCell>
                      <TableCell>Status</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {chartData.map((row) => (
                      <TableRow key={row.frame}>
                        <TableCell>{row.frame}</TableCell>
                        <TableCell>{row.timeFormatted}</TableCell>
                        <TableCell align="right">{row.count}</TableCell>
                        <TableCell align="right">
                          {row.averageCount.toFixed(2)}
                        </TableCell>
                        <TableCell>
                          <Chip
                            label={row.alert ? "Alert" : "Normal"}
                            color={row.alert ? "error" : "success"}
                            size="small"
                          />
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </>
        )}

        {/* Forecast Data Display */}
        {!isDetection && (
          <>
            {viewMode === "chart" ? (
              <Box>
                <Tabs
                  value={activeTab}
                  onChange={handleTabChange}
                  sx={{ mb: 2 }}
                >
                  <Tab label="Predictions Comparison" />
                  <Tab label="Model Differences" />
                </Tabs>

                <Box height={400}>
                  <ResponsiveContainer width="100%" height="100%">
                    {activeTab === 0 ? (
                      <LineChart data={chartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis
                          dataKey="step"
                          label={{
                            value: "Future Steps",
                            position: "insideBottom",
                            offset: -10,
                          }}
                        />
                        <YAxis
                          label={{
                            value: "Predicted Count",
                            angle: -90,
                            position: "insideLeft",
                          }}
                        />
                        <Tooltip labelFormatter={(value) => `Step ${value}`} />
                        <Legend />
                        <Line
                          type="monotone"
                          dataKey="lstm"
                          stroke="#1976d2"
                          strokeWidth={2}
                          name="LSTM Prediction"
                        />
                        <Line
                          type="monotone"
                          dataKey="linear"
                          stroke="#f44336"
                          strokeWidth={2}
                          name="Linear Prediction"
                        />
                      </LineChart>
                    ) : (
                      <AreaChart data={chartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="step" />
                        <YAxis />
                        <Tooltip />
                        <Area
                          type="monotone"
                          dataKey="difference"
                          stroke="#ff9800"
                          fill="#ff9800"
                          fillOpacity={0.3}
                          name="Model Difference"
                        />
                      </AreaChart>
                    )}
                  </ResponsiveContainer>
                </Box>
              </Box>
            ) : (
              <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                <Table stickyHeader>
                  <TableHead>
                    <TableRow>
                      <TableCell>Step</TableCell>
                      <TableCell align="right">LSTM</TableCell>
                      <TableCell align="right">Linear</TableCell>
                      <TableCell align="right">Difference</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {chartData.map((row) => (
                      <TableRow key={row.step}>
                        <TableCell>{row.step}</TableCell>
                        <TableCell align="right">
                          {row.lstm.toFixed(2)}
                        </TableCell>
                        <TableCell align="right">
                          {row.linear.toFixed(2)}
                        </TableCell>
                        <TableCell align="right">
                          {row.difference.toFixed(2)}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </>
        )}

        {/* Summary Information */}
        {fileData?.metadata && (
          <Box mt={2} pt={2} borderTop={1} borderColor="divider">
            <Typography variant="subtitle2" gutterBottom>
              File Summary
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {isDetection
                ? `${chartData.length} frames • ${
                    chartData.filter((d) => d.alert).length
                  } alerts`
                : `${fileData.data.steps} prediction steps • Window size: ${fileData.data.window_size}`}
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default DataViewer;
